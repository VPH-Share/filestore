#input { 
#  stdin { 
#      codec => multiline {
#      patterns_dir => "./patterns"
#      pattern => "%{MONTH} %{MONTHDAY}, %{YEAR} %{MY_12_TIME}"
#      negate => true
#      what => previous
#    }
#  } 
#}

input { 
  file {
    path => [ "/home/alogo/Downloads/log/*.log" ]
      codec => multiline {
      patterns_dir => "./patterns"
      pattern => "%{MONTH} %{MONTHDAY}, %{YEAR} %{MY_12_TIME}"
      negate => true
      what => previous
    }
    start_position => "beginning"
  }
}



  #--------------Timestamp-----------------
filter {

  grok {
    patterns_dir => "./patterns"
    match => [ "message", "(?<logdate>%{MONTH} %{MONTHDAY}, %{YEAR} %{MY_12_TIME}) %{NOTSPACE:thread} %{NOTSPACE:method}\n%{LOGLEVEL:loglevel}: %{ALLDATA:logmessage}" ]
    add_field => [ "", "thread" ]
    add_field => [ "", "method" ]
    add_field => [ "", "loglevel" ]
    add_field => [ "", "logmessage" ]
  }
 
  date {
    match => [ "logdate", "MMM dd, YYYY h:mm:ss a" ]
  }
}
  
filter {
  #--------------Local DB Auth-----------------
  grok {
    patterns_dir => "./patterns"
    match => [ "logmessage", "%{LOCAL_DB_TOKEN:token}" ]
    add_field => [ "", "token" ]
  }
  
  
  grok {
    patterns_dir => "./patterns"
    match => [ "logmessage", "%{LOCAL_DB_UNAME_REF:userNameRef}" ]
    add_field => [ "", "userNameRef" ]
  }
    
  mutate {
    convert => [ "userNameRef", "integer" ]
  }
  
}
  

 # Receive Transmit and Replicate
filter { 
 #---------------------------------Upload TO lobcder -----------------------------  
 #Source: 149.156.10.132 Destination: vphlob Rx_Speed: 11117.299035369775 Kbites/sec Rx_Size: 864370 bytes
  grok {
    patterns_dir => "./patterns"
    match => [ "logmessage", "Source: %{IPORHOST_PATH_URI:rx_source} Destination: %{IPORHOST_PATH_URI:rx_destination} Rx(\s|_)Speed: %{BASE16FLOAT:rx_speed} Kbites/sec Rx(\s|_)Size: %{NUMBER:rx_size} bytes" ]
    add_field => [ "", "rx_source" ]
    add_field => [ "", "rx_destination" ]
    add_field => [ "", "rx_speed" ]
    add_field => [ "", "rx_size" ]
  }
  
  mutate {
    convert => [ "rx_size", "integer" ]
    convert => [ "rx_speed", "float" ]
  }
  
  mutate {
    gsub => [
      #"rx_destination", "[A-Za-z]+(\+[A-Za-z+]+)?://", "",
      "rx_source", "[A-Za-z]+(\+[A-Za-z+]+)?://", ""
    ]
  }
    
  geoip {
    source => "rx_source"
    target => "rx_source_location"
    database => "./GeoLiteCity.dat"
  } 

  geoip {
    source => "rx_destination"
    target => "rx_destination_location"
    database => "./GeoLiteCity.dat"
  }


 #---------------------------------Download FROM lobcder -----------------------------  
 # Source: 149.156.10.131 Destination: 149.156.10.132 Tx Speed: 820.4387096774194 Kbites/sec Tx_Size: 635840 bytes
 # Source: 149.156.10.131 Destination: 46.105.98.182 Tx_Speed: 1318.6917933130699 Kbites/sec Tx_Size: 271156 bytes
  grok {
    patterns_dir => "./patterns"
    match => [ "logmessage", "Source: %{IPORHOST_PATH_URI:tx_source} Destination: %{IPORHOST_PATH_URI:tx_destination} Tx(\s|_)Speed: %{BASE16FLOAT:tx_speed} Kbites/sec Tx(\s|_)Size: %{NUMBER:tx_size} bytes" ]
    add_field => [ "", "tx_source" ]
    add_field => [ "", "tx_destination" ]
    add_field => [ "", "tx_speed" ]
    add_field => [ "", "tx_size" ]
  }
   
  mutate {
    convert => [ "tx_size", "integer" ]
    convert => [ "tx_speed", "float" ]
  }
    
  mutate {
    gsub => [
      "tx_destination", "[A-Za-z]+(\+[A-Za-z+]+)?://", "",
       "tx_source", "[A-Za-z]+(\+[A-Za-z+]+)?://", ""
    ]
  }
    
  geoip {
    source => "tx_source"
    target => "tx_source_location"
    database => "./GeoLiteCity.dat"
  } 

  geoip {
    source => "tx_destination"
    target => "tx_destination_location"
    database => "./GeoLiteCity.dat"
  }

 #Source: vphlob Destination: 149.156.10.131 Replication_Speed: 2.7925142392188773 Kbites/sec Repl_Size: 429 bytes
  grok {
    patterns_dir => "./patterns"
    match => [ "logmessage", "Source: %{IPORHOST_PATH_URI:repl_source} Destination: %{IPORHOST_PATH_URI:repl_destination} Replication(\s|_)Speed: %{BASE16FLOAT:repl_speed} Kbites/sec Repl(\s|_)Size: %{NUMBER:repl_size} bytes" ]
    add_field => [ "", "repl_source" ]
    add_field => [ "", "repl_destination" ]
    add_field => [ "", "repl_speed" ]
    add_field => [ "", "repl_size" ]
  }
  
  mutate {
    convert => [ "repl_size", "integer" ]
    convert => [ "repl_speed", "float" ]
  }
    
#  mutate {
#    gsub => [
#      "repl_destination", "[A-Za-z]+(\+[A-Za-z+]+)?://", "",
#      "repl_source", "[A-Za-z]+(\+[A-Za-z+]+)?://", ""
#    ]
#  }
    
  geoip {
    source => "repl_source"
    target => "repl_source_location"
    database => "./GeoLiteCity.dat"
  } 

  geoip {
    source => "repl_destination"
    target => "repl_destination_location"
   database => "./GeoLiteCity.dat"
  }
  
}


output { 
  stdout { } 
  elasticsearch { embedded => true }
#  file {
#    path => "./logstash.out"
#  }
}
