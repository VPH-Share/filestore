#input { 
#  stdin { 
#      codec => multiline {
#      patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
#      pattern => "%{MONTH} %{MONTHDAY}, %{YEAR} %{MY_12_TIME}"
#      negate => true
#      what => previous
#    }
#  } 
#}

input { 
  file {
    path => [ "/home/alogo/Downloads/log/*.log" ]
      codec => multiline {
      patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
      pattern => "%{MONTH} %{MONTHDAY}, %{YEAR} %{MY_12_TIME}"
      negate => true
      what => previous
    }
    start_position => "beginning"
  }
}



  #--------------Timestamp-----------------
filter {

  grok {
    patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
    match => [ "message", "(?<logdate>%{MONTH} %{MONTHDAY}, %{YEAR} %{MY_12_TIME}) %{NOTSPACE:thread} %{NOTSPACE:method}\n%{LOGLEVEL:loglevel}: %{ALLDATA:logmessage}" ]
  }
 
  date {
    match => [ "logdate", "MMM dd, YYYY h:mm:ss a" ]
  }
}
  
filter {
  #-------------Auth-----------------
  grok {
    patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
    match => [ "logmessage", "%{LOCAL_DB_TOKEN:token}" ]
    #add_field => [ "", "token" ]
  }
  
  
  grok {
    patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
    match => [ "logmessage", "%{LOCAL_DB_UNAME_REF:userNameRef}" ]
    #add_field => [ "", "userNameRef" ]
  }
    
  mutate {
    convert => [ "userNameRef", "integer" ]
  }
  
}
  

 # Receive Transmit and Replicate
filter { 
#---------------------------------Upload TO lobcder -----------------------------  
    #Source: 149.156.10.132 Destination: vphlob Rx_Speed: 11117.299035369775 Kbites/sec Rx_Size: 864370 bytes
    #Source: 149.156.10.132 Destination: file://vphlob Rx_Speed: 59.172413793103445 Kbites/sec Rx_Size: 429 bytes
    grok {
        patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
        match => [ "logmessage", "Source: %{IPORHOST_PATH_URI:rx_source} Destination: %{IPORHOST_PATH_URI:rx_destination} Rx(\s|_)Speed: %{BASE16FLOAT:rx_speed} Kbites/sec Rx(\s|_)Size: %{NUMBER:rx_size} bytes" ]
        # add_field => [ "", "rx_source" ]
        # add_field => [ "", "rx_destination" ]
        # add_field => [ "", "rx_speed" ]
        # add_field => [ "", "rx_size" ]
     }


    mutate {
        convert => [ "rx_size", "integer" ]
        convert => [ "rx_speed", "float" ]
        gsub => [
                "rx_source", "[A-Za-z]+(\+[A-Za-z+]+)?://", ""
                ]
    }

    #ruby {
    #    code => "sum = 1 + 1"
    #    add_field => [ "my_Field", "sum" ]
    #} 

    geoip {
      source => "rx_source"
      target => "rx_sourceLoc"
      database => "/home/alogo/Downloads/GeoLiteCity.dat"
    } 


    
}

 filter { 
 #---------------------------------Download FROM lobcder -----------------------------  
 # Source: 149.156.10.131 Destination: 149.156.10.132 Tx Speed: 820.4387096774194 Kbites/sec Tx_Size: 635840 bytes
 # Source: 149.156.10.131 Destination: 46.105.98.182 Tx_Speed: 1318.6917933130699 Kbites/sec Tx_Size: 271156 bytes
    grok {
        patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
        match => [ "logmessage", "Source: %{IPORHOST_PATH_URI:tx_source} Destination: %{IPORHOST_PATH_URI:tx_destination} Tx(\s|_)Speed: %{BASE16FLOAT:tx_speed} Kbites/sec Tx(\s|_)Size: %{NUMBER:tx_size} bytes" ]
        # add_field => [ "", "tx_source" ]
        # add_field => [ "", "tx_destination" ]
        # add_field => [ "", "tx_speed" ]
        # add_field => [ "", "tx_size" ]
    }

    mutate {
      convert => [ "tx_size", "integer" ]
      convert => [ "tx_speed", "float" ]
    }
    
    mutate {
      gsub => [
        "tx_destination", "[A-Za-z]+(\+[A-Za-z+]+)?://", ""
      ]
    }
    
  geoip {
    source => "tx_source"
    target => "tx_sourceLoc"
    database => "/home/alogo/Downloads/GeoLiteCity.dat"
  } 

    geoip {
      source => "tx_destination"
      target => "tx_destinationLoc"
      database => "/home/alogo/Downloads/GeoLiteCity.dat"
   }
 }

 filter { 
 #Source: vphlob Destination: 149.156.10.131 Replication_Speed: 2.7925142392188773 Kbites/sec Repl_Size: 429 bytes
  grok {
    patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
    match => [ "logmessage", "Source: %{IPORHOST_PATH_URI:repl_source} Destination: %{IPORHOST_PATH_URI:repl_destination} Replication(\s|_)Speed: %{BASE16FLOAT:repl_speed} Kbites/sec Repl(\s|_)Size: %{NUMBER:repl_size} bytes" ]
    # add_field => [ "", "repl_source" ]
    # add_field => [ "", "repl_destination" ]
    # add_field => [ "", "repl_speed" ]
    # add_field => [ "", "repl_size" ]
  }
  
  mutate {
    convert => [ "repl_size", "integer" ]
    convert => [ "repl_speed", "float" ]
  }
    
    mutate {
      gsub => [
        "repl_destination", "[A-Za-z]+(\+[A-Za-z+]+)?://", "",
        "repl_source", "[A-Za-z]+(\+[A-Za-z+]+)?://", ""
      ]
    }
    
    geoip {
      source => "repl_source"
      target => "repl_source_location"
      database => "/home/alogo/Downloads/GeoLiteCity.dat"
    } 

   geoip {
     source => "repl_destination"
     target => "repl_destinationLoc"
     database => "/home/alogo/Downloads/GeoLiteCity.dat"
   }
  
}

 
 filter { 

    grok {
        patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
        match => [ "logmessage", "Req_Source: %{IPORHOST_PATH_URI:req_source} Method: %{WEBDAV_VERB:req_verb} Content_Len: %{INT:req_contLen} Content_Type: %{NOTSPACE:req_contType} Elapsed_Time: %{BASE16FLOAT:req_elapsed} sec EncodedUser: %{NOTSPACE:req_user} UserAgent: %{GREEDYDATA:req_userAgent} queryString: %{GREEDYDATA:rest_of_data}" ]
        # add_field => [ "", "req_source" ]
        # add_field => [ "", "req_verb" ]
        # add_field => [ "", "req_contLen" ]
        # add_field => [ "", "req_contType" ]
        # add_field => [ "", "req_elapsed" ]
        # add_field => [ "", "req_user" ]  
        # add_field => [ "", "req_userAgent" ] 
    } 

    if [rest_of_data] {
        grok {
            patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
            match => [ "rest_of_data", "%{NOTSPACE:req_queryString} reqURL: %{URI:req_URL}" ]
            # add_field => [ "", "req_queryString" ] 
            # add_field => [ "", "req_URL" ]
        }
    }

    mutate {
        convert => [ "req_contLen", "integer" ]
        convert => [ "req_elapsed", "float" ]
    }

    if [req_source] {
      geoip {
          source => "req_source"
          target => "req_sourceLoc"
          database => "/home/alogo/Downloads/GeoLiteCity.dat"
      }
    }

    useragent {
        source => "req_userAgent"
    }
}

 filter{

    grok {
        patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
        match => [ "logmessage", "getRolesStr: %{GREEDYDATA:auth_roles}" ]
        # add_field => [ "", "auth_roles" ]
    }

    grok {
        patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
        match => [ "logmessage", "From: %{NOTSPACE:auth_from} user: %{NOTSPACE:auth_user} password: %{NOTSPACE:auth_passwd}" ]
        # add_field => [ "", "auth_from" ]
        # add_field => [ "", "auth_user" ]
        # add_field => [ "", "auth_passwd" ]
    }
    
    grok {
        patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
        match => [ "logmessage", "From: %{NOTSPACE:auth_from} User: %{NOTSPACE:auth_user} Method: %{WEBDAV_VERB:auth_verb}" ]
        # add_field => [ "", "auth_from" ]
        # add_field => [ "", "auth_user" ]
        # add_field => [ "", "auth_verb" ]
    }

    grok {
        patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
        match => [ "logmessage", "createCollection(|:) %{NOTSPACE:new_collection} in(|:) %{NOTSPACE:parent_collection}" ]
        # add_field => [ "", "new_collection" ]
        # add_field => [ "", "parent_collection" ]
    }
 }

filter{

    grok {
        patterns_dir => "/home/alogo/workspace/lobcder-tests/etc/patterns"
        match => [ "logmessage", "DELETE: %{URI:deleted_uri}" ]
        # add_field => [ "", "auth_roles" ]
    }
}

output { 
  #stdout { } 
    elasticsearch { embedded => true }

    mongodb {
        collection => "lobcderCollection"
        database => "lobcderDatabase"
        uri => "mongodb://localhost"
    }


 #    statsd { 
#        #increment => "apache.response.%{rx_size}"
#        count => [ "statsd.bytes", "%{rx_size}" ]
#        port => 8125
#        host => "localhost"
#    }

#    graphite {
#        metrics => [ "logstash.rx_size", "%{rx_size}" ]
#        #metrics_format => ... # string (optional), default: "*"
#  }

#    graphite {
#        metrics => [ "logstash.tx_size", "%{tx_size}" ]
#        #metrics_format => ... # string (optional), default: "*"
#  }

}
